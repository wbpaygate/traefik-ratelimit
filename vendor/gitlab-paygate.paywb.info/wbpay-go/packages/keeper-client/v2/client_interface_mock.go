// Code generated by MockGen. DO NOT EDIT.
// Source: client_interface.go

// Package keeperclient is a generated GoMock package.
package keeperclient

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	routing "gitlab-paygate.paywb.info/wbpay-go/packages/keeper-client/v2/routing"
	transport "gitlab-paygate.paywb.info/wbpay-go/packages/keeper-client/v2/transport"
)

// MockKeeperClient is a mock of KeeperClient interface.
type MockKeeperClient struct {
	ctrl     *gomock.Controller
	recorder *MockKeeperClientMockRecorder
}

// MockKeeperClientMockRecorder is the mock recorder for MockKeeperClient.
type MockKeeperClientMockRecorder struct {
	mock *MockKeeperClient
}

// NewMockKeeperClient creates a new mock instance.
func NewMockKeeperClient(ctrl *gomock.Controller) *MockKeeperClient {
	mock := &MockKeeperClient{ctrl: ctrl}
	mock.recorder = &MockKeeperClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeeperClient) EXPECT() *MockKeeperClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockKeeperClient) Get(ctx context.Context, key string) (*transport.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(*transport.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockKeeperClientMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKeeperClient)(nil).Get), ctx, key)
}

// GetAllBankErrors mocks base method.
func (m *MockKeeperClient) GetAllBankErrors(ctx context.Context, bank string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBankErrors", ctx, bank)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBankErrors indicates an expected call of GetAllBankErrors.
func (mr *MockKeeperClientMockRecorder) GetAllBankErrors(ctx, bank interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBankErrors", reflect.TypeOf((*MockKeeperClient)(nil).GetAllBankErrors), ctx, bank)
}

// GetAllLocalizationErrors mocks base method.
func (m *MockKeeperClient) GetAllLocalizationErrors(ctx context.Context) (map[string]map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllLocalizationErrors", ctx)
	ret0, _ := ret[0].(map[string]map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllLocalizationErrors indicates an expected call of GetAllLocalizationErrors.
func (mr *MockKeeperClientMockRecorder) GetAllLocalizationErrors(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllLocalizationErrors", reflect.TypeOf((*MockKeeperClient)(nil).GetAllLocalizationErrors), ctx)
}

// GetFallback mocks base method.
func (m *MockKeeperClient) GetFallback(ctx context.Context, key, fallbackValue string) (*transport.Value, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFallback", ctx, key, fallbackValue)
	ret0, _ := ret[0].(*transport.Value)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetFallback indicates an expected call of GetFallback.
func (mr *MockKeeperClientMockRecorder) GetFallback(ctx, key, fallbackValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFallback", reflect.TypeOf((*MockKeeperClient)(nil).GetFallback), ctx, key, fallbackValue)
}

// IsFeatureActive mocks base method.
func (m *MockKeeperClient) IsFeatureActive(ctx context.Context, key, user string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFeatureActive", ctx, key, user)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFeatureActive indicates an expected call of IsFeatureActive.
func (mr *MockKeeperClientMockRecorder) IsFeatureActive(ctx, key, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFeatureActive", reflect.TypeOf((*MockKeeperClient)(nil).IsFeatureActive), ctx, key, user)
}

// IsFeatureActiveBank mocks base method.
func (m *MockKeeperClient) IsFeatureActiveBank(ctx context.Context, key string, dto routing.FeatureBankDto) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFeatureActiveBank", ctx, key, dto)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFeatureActiveBank indicates an expected call of IsFeatureActiveBank.
func (mr *MockKeeperClientMockRecorder) IsFeatureActiveBank(ctx, key, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFeatureActiveBank", reflect.TypeOf((*MockKeeperClient)(nil).IsFeatureActiveBank), ctx, key, dto)
}

// IsFeatureActiveFallback mocks base method.
func (m *MockKeeperClient) IsFeatureActiveFallback(ctx context.Context, key, user string, fallbackVal bool) (bool, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFeatureActiveFallback", ctx, key, user, fallbackVal)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// IsFeatureActiveFallback indicates an expected call of IsFeatureActiveFallback.
func (mr *MockKeeperClientMockRecorder) IsFeatureActiveFallback(ctx, key, user, fallbackVal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFeatureActiveFallback", reflect.TypeOf((*MockKeeperClient)(nil).IsFeatureActiveFallback), ctx, key, user, fallbackVal)
}

// IsFeatureActiveRouting mocks base method.
func (m *MockKeeperClient) IsFeatureActiveRouting(ctx context.Context, key string, dto routing.FeatureRoutingDto) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFeatureActiveRouting", ctx, key, dto)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFeatureActiveRouting indicates an expected call of IsFeatureActiveRouting.
func (mr *MockKeeperClientMockRecorder) IsFeatureActiveRouting(ctx, key, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFeatureActiveRouting", reflect.TypeOf((*MockKeeperClient)(nil).IsFeatureActiveRouting), ctx, key, dto)
}
